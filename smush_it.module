<?php

define('BC_LOADED', extension_loaded('bcmath'));
/**
 * @Author SeanJA <http://seanja.com>
 * @license MIT
 */
module_load_include('inc', 'smush_it', 'smush_it.class');
module_load_include('inc', 'smush_it', 'smush_it.functions');
if (BC_LOADED) {
  module_load_include('inc', 'smush_id', 'smush_it.bcfunctions');
}

/**
 * Implements hook_nodeapi()
 * @staticvar string $image_mimes
 * @param node $node The node being manipulated
 * @param string $op The operation being performed
 * @param string $teaser
 */
function smush_it_nodeapi(&$node, $op, $teaser) {
  static $image_mimes;
  if (!$image_mimes) {
    $image_mimes = array('image/jpeg', 'image/png', 'image/gif');
  }
  $smush_on_create_update = variable_get('_smush_it_on_create_update', false);
  if ($smush_on_create_update) {
    switch ($op) {
      case 'insert':
      case 'update':
        if (user_access('upload files')) {
          foreach ($node->files as &$file) {
            if ($file['new'] && in_array($file['filemime'], $image_mimes)) {
              smush_it::smush_image($file);
            }
          }
        }
        break;
    }
  }
}

/**
 * Gets the information from the smush.it settings to run the cron job
 * if cron_count == 0 or cron_active == false then the cron job will not run
 * implementation of hook_cron()
 */
function smush_it_cron() {
  $cron_active = variable_get('_smush_it_cron_active', false);
  $cron_count = variable_get('_smush_it_cron_count', 0);
  if ($cron_active && $cron_count > 0) {
    _process_cron($cron_count);
  }
}

/**
 * Actually run the unprocessed images through smush.it
 * @param int $cron_count
 */
function _process_cron($cron_count) {
  //select the files where there is no equivalent smush_it entry
  $to_process = db_query('SELECT files.* FROM {files} 
    LEFT JOIN {smush_it} ON files.fid = smush_it.fid 
    WHERE smush_it.smushid IS NULL
    AND filemime IN (\'image/jpeg\', \'image/png\', \'image/gif\') 
    LIMIT 0 , %d', $cron_count);
  while ($image = db_fetch_array($to_process)) {
    smush_it::smush_image($image);
  }
}

/**
 * Add the smush.it settings menu item
 * implementation of hook_menu()
 * @return array 
 */
function smush_it_menu() {
  //smush it settings
  $items['admin/settings/smush-it'] = array(
    'title' => 'Smush.it',
    'description' => t('The settings for smush.it'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smush_it_settings_page'),
    'access callback' => 'user_access',
    'access arguments' => array('administer upload'),
    'type' => MENU_NORMAL_ITEM,
  );

  //this seems redundant
  $items['admin/settings/smush-it/settings'] = $items['admin/settings/smush-it'];
  //replace values that are different for this menu item (it is a tab)
  $items['admin/settings/smush-it/settings']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['admin/settings/smush-it/settings']['weight'] = -10;
  $items['admin/settings/smush-it/settings']['title'] = 'Settings';

  //file listing
  $items['admin/settings/smush-it/files'] = array(
    'title' => 'Files',
    'access callback' => 'user_access',
    'page callback' => 'smush_it_file_listing',
    'access arguments' => array('administer upload'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '0',
  );


  //stats
  if (BC_LOADED) {
    $items['admin/settings/smush-it/stats'] = array(
      'title' => 'Stats',
      'access callback' => 'user_access',
      'page callback' => 'smush_it_stats_page',
      'access arguments' => array('administer upload'),
      'type' => MENU_LOCAL_TASK,
      'weight' => '10',
    );
  }

  //smush an individual image
  $items['admin/settings/smush-it/smush/%'] = array(
    'page callback' => 'smush_it_manually',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer upload'),
    'type' => MENU_CALLBACK,
  );


  return $items;
}

if (BC_LOADED) {

  /**
   * The smush.it stats page
   * @return string
   */
  function smush_it_stats_page() {

    $saved_bytes = smush_it::_total_saved();
    $smushed_bytes = smush_it::_image_size();
    $count_smushed = smush_it::_smushed_count();
    $count_images = smush_it::_image_count();

    //these numbers could end up being extremely big...
    $avg_bytes = 0;
    if ($count_smushed > 0) {
      $avg_bytes = sprintf('%.0f', bcdiv($saved_bytes, $count_smushed));
    }
    $original_bytes = sprintf('%.0f', bcadd($smushed_bytes, $saved_bytes));
    $count_to_process = sprintf('%.0f', bcsub($count_images, $count_smushed));

    $rows[] = array(
      '<h4>' . t('Original Image Size:') . '</h4>',
      smush_it::byte_format($original_bytes)
    );
    $rows[] = array(
      '<h4>' . t('Bytes Saved:') . '</h4>',
      smush_it::byte_format($saved_bytes)
    );
    $rows[] = array(
      '<h4>' . t('Smushed Size:') . '</h4>',
      smush_it::byte_format($smushed_bytes)
    );
    $rows[] = array(
      '<h4>' . t('Images Smushed:') . '</h4>',
      $count_smushed
    );
    $rows[] = array(
      '<h4>' . t('Average Bytes Saved:') . '</h4>',
      smush_it::byte_format($avg_bytes)
    );
    $rows[] = array(
      '<h4>' . t('Images:') . '</h4>',
      $count_images
    );
    $rows[] = array(
      '<h4>' . t('Images To Process:') . '</h4>',
      $count_to_process
    );
    $output = theme('table', null, $rows);
    return $output;
  }

}

/**
 * Smush a file manually, then redirect to the files page
 * @param int $file_id 
 */
function smush_it_manually($file_id, $redirect = true) {
  $result = db_query('SELECT * FROM {files} WHERE fid = %d', $file_id);
  $file = db_fetch_array($result);
  if (smush_it::smush_image($file)) {
    drupal_set_message($file['filename'] . ' has been smushed.');
  }
  if ($redirect) {
    //@BUG: should go back to previous page the user was on
    //   ie: admin/settings/smush-it/files?page=10
    drupal_goto('admin/settings/smush-it/files');
  }
}

/**
 * Displays the images you have uploaded, lets you smush them one by one if you want to
 * @return type 
 */
function smush_it_file_listing() {

  $header = array(
    array(
      'data' => t('Filename'),
      'field' => 'files.filename',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Mime'),
      'field' => 'files.filemime',
    ),
    array(
      'data' => t('Orignal'),
    ),
    array(
      'data' => t('Smushed'),
      'field' => 'files.filesize',
    ),
    array(
      'data' => t('Saved'),
      'field' => 'smush_it.space_saved',
    ),
    array('data' => t('Operations'), 'colspan' => '3')
  );

  $q = 'SELECT files.*, smush_it.space_saved, smush_it.smushid FROM {files}
    LEFT JOIN {smush_it} ON files.fid = smush_it.fid
    AND filemime IN (\'image/jpeg\', \'image/png\', \'image/gif\')';

  $limit = 25;

  $q .= tablesort_sql($header);

  $result = pager_query($q, $limit);

  $table_rows = array();
  while ($file = db_fetch_object($result)) {
    $row = array(
      array('data' => l($file->filename, $file->filepath)),
      array('data' => $file->filemime),
      array('data' => smush_it::byte_format($file->filesize + $file->space_saved)),
    );
    if ($file->smushid) {
      $row[] = array('data' => smush_it::byte_format($file->filesize));
      $row[] = array('data' => smush_it::byte_format($file->space_saved));
    } else {
      $row[] = '';
      $row[] = '';
    }

    //if the file has not been smushed, this will not be set, so show them a link to smush the file
    if (empty($file->smushid)) {
      $row[] = array('data' => l('smush', "admin/settings/smush-it/smush/$file->fid"));
    } else {
      $row[] = array('data' => '');
    }
    $table_rows[] = $row;
  }
  $output = '<h3>' . t('Files') . '</h3>';

  $tags = array(
    'first',
    '<prev',
    '',
    'next>',
    'last',
  );

  $output .= theme('table', $header, $table_rows);
  $output .= theme('pager', $tags, $limit);
  return $output;
}

/**
 * The smush.it admin settings form
 * @return array 
 */
function smush_it_settings_page() {
  //in this example i'm creating a checkbox for each existing content type
  $form['cron_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of images processed during cron'),
    '#description' => t('If your cron jobs are running too long, make this a smaller number.'),
    '#default_value' => variable_get('_smush_it_cron_count', 10)
  );

  $form['cron_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process images during cron'),
    '#description' => t('If you don\'t want smush.it to run when the cron job fires, leave this un-checked.'),
    '#default_value' => variable_get('_smush_it_cron_active', false)
  );

  $form['on_create_update'] = array(
    '#type' => 'checkbox',
    '#title' => t('Smush files on create/update'),
    '#description' => t('If you want the cron job to handle smushing of images, check this off to ignore the create / update node action.'),
    '#default_value' => variable_get('_smush_it_on_create_update', false)
  );

  $form['test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Testing Mode'),
    '#description' => t('If you want to test things locally.'),
    '#default_value' => variable_get('_smush_it_testing', false)
  );

  $form['test_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Testing Image'),
    '#description' => t('The url to an image that you want to test with. Be nice, don\'t eat somone elses bandwidth up. !!Note: Your local images will be replaced by this one.!!'),
    '#default_value' => variable_get('_smush_it_test_image', '')
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#executes_submit_callback' => true
  );

  $form['#submit'] = array(
    '_smush_it_form_submit'
  );

  return $form;
}

/**
 * Save the submitted values
 * @param type $form
 * @param type $form_state 
 */
function _smush_it_form_submit($form, &$form_state) {
  if ($form['cron_active']['#value']) {
    variable_set('_smush_it_cron_active', true);
  } else {
    variable_set('_smush_it_cron_active', false);
  }
  $cron_count_value = (int) $form['cron_count']['#value'];
  if ($cron_count_value && $cron_count_value >= 0) {
    variable_set('_smush_it_cron_count', (int) $cron_count_value);
  } elseif ($cron_count_value && $cron_count_value < 0) {
    form_set_error('', t('Cron count should be an integer >= 0.'));
  }

  if ($form['test_mode']['#value']) {
    variable_set('_smush_it_testing', true);
  } else {
    variable_set('_smush_it_testing', false);
  }

  if ($form['on_create_update']['#value']) {
    variable_set('_smush_it_on_create_update', true);
  } else {
    variable_set('_smush_it_on_create_update', false);
  }

  if ($form['test_image']['#value']) {
    variable_set('_smush_it_test_image', $form['test_image']['#value']);
  } else {
    variable_set('_smush_it_testing', '');
  }

  drupal_set_message('Smush.it settings updated', 'status');
}